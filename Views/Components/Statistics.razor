<MudContainer>
  <MudText Typo="Typo.h5" Class="ml-2 mt-4 mb-2">Statistics</MudText>
  <MudList Class="pt-0">
    <MudPaper Class="my-2 px-3">
      <div class="pt-1">
        <MudText Typo="Typo.button">Your top 3 favorite</MudText>
        @foreach (var (pair, index) in MyFavoriteRestaurants.Where((_, idx) => idx < 3).Select((p, idx) => (p, idx)))
        {
          <MudListItem Class="pa-0">
            @renderTrophy(index) @(pair.Id)
          </MudListItem>
        }
        @if (MyFavoriteRestaurants.Count == 0)
        {
          <MudListItem Class="pa-0">No data</MudListItem>
        }
      </div>
      <MudDivider Class="mt-1" />
      <div class="pt-1">
        <MudText Typo="Typo.button" Class="mt-1">Global top 3</MudText>
        @foreach (var (pair, index) in RestaurantPopularity.Where((_, idx) => idx < 3).Select((p, idx) => (p, idx)))
        {
          <MudListItem Class="pa-0">
            @renderTrophy(index) @(pair.Id)
          </MudListItem>
        }
        @if (RestaurantPopularity.Count > 3)
        {
          <MudListItem Class="pa-0">
            💩 @(WorstRestaurant.Id)
          </MudListItem>
        }
      </div>
    </MudPaper>
  </MudList>
</MudContainer>

@code {
  protected List<(string Id, int Count)> RestaurantPopularity { get; set; } = new List<(string Id, int Count)>();

  protected List<(string Id, int Count)> MyFavoriteRestaurants { get; set; } = new List<(string Id, int Count)>();

  protected (string Id, int Count) WorstRestaurant => RestaurantPopularity.LastOrDefault();

  [Inject]
  protected StorageService StorageService { get; set; }

  [Inject]
  protected RestaurantService RestaurantService { get; set; }

  [Inject]
  protected UserService UserService { get; set; }

  protected async override Task OnInitializedAsync()
  {
    var restaurants = (await RestaurantService.GetRestaurantsAsync(forceReload: true)).OrderBy(x => x.Name).ToList();
    var votes = await StorageService.GetVotesAsync();
    List<(string Id, int Count)> getRestaurantRankings(string userId = null) =>
      votes
      .Select(x => (x.RowKey, x.GetVotesTyped()))
      .Where(x => userId != null ? x.RowKey == userId : true)
      .SelectMany(x => x.Item2)
      .GroupBy(restaurantId => restaurants.First(x => x.RowKey == restaurantId).Name, x => x)
      .Select((group) => (group.Key, group.Count()))
      .OrderByDescending(x => x.Item2)
      .ToList();
    MyFavoriteRestaurants = getRestaurantRankings(UserService.UserData.GetUserId());
    RestaurantPopularity = getRestaurantRankings();
  }

  protected string renderTrophy(int index)
  {
    switch (index)
    {
      case 0: return "🏆";
      case 1: return "🥈";
      case 2: return "🥉";
      default: return "";
    }
  }
}
