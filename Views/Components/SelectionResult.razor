@implements IDisposable

<MudContainer>
  <MudText Typo="Typo.h5" Class="mx-2 mt-4 mb-2">Result</MudText>
  <MudList Class="pt-0">
    @foreach (var (count, ids) in Results)
    {
      <MudListItem Class="pa-0 ma-0">
        <MudPaper Class="py-2 px-3">
          <MudText Style="font-weight: 600">@count vote@(count != 1 ? "s" : ""):</MudText>
          <MudText Typo="Typo.body2">
            @foreach (var restaurant in ids)
            {
              <MudChip Variant="Variant.Outlined" Color="@(UiHelper.PickEnumValueByHash<Color>(restaurant.GetId()))">@restaurant.Name</MudChip>
            }
          </MudText>
        </MudPaper>
      </MudListItem>
    }
  </MudList>
</MudContainer>

@code {

  private List<(int Count, List<RestaurantData> Restaurants)> Results { get; set; } = new();

  [Inject]
  protected StorageService StorageService { get; set; }

  [Inject]
  protected UserService UserService { get; set; }

  protected override async Task OnInitializedAsync()
  {
    UserService.OnBroadcastChoiceChanged -= OnBroadcastChoiceChangedAsync;
    UserService.OnBroadcastChoiceChanged += OnBroadcastChoiceChangedAsync;

    await UpdateChoicesAsync();
  }

  public async Task UpdateChoicesAsync()
  {
    var restaurants = (await StorageService.GetRestaurantsAsync()).ToDictionary(x => x.GetId());
    var allUsersChoices = await UserService.GetAllChoicesAsync(todayOnly: true);

    Results = allUsersChoices
      .SelectMany(x => x.GetChoicesTyped()) // get flat array of restaurant ids
      .GroupBy(x => x) // group by ids, making lists of the same ids
      .ToDictionary(x => x.Key, x => x.Count()) // aggregate these same ids by count, create id => count map
      .GroupBy(x => x.Value, x => x.Key) // group by count, collect every id that has the same count
      .ToDictionary(x => x.Key) // join ids by comma, create count => id list
      .OrderByDescending(x => x.Key) // order key-pairs by count descending
      .Take(3) // select the 3 most loved restaurant-list
      .Select(x => (x.Key, x.Value.Select(y => restaurants[y]).ToList()))
      .ToList();
  }

  public async Task OnBroadcastChoiceChangedAsync(BroadcastMessage message)
  {
    await UpdateChoicesAsync();
    await InvokeAsync(StateHasChanged);
  }

  public void Dispose()
  {
    UserService.OnBroadcastChoiceChanged -= OnBroadcastChoiceChangedAsync;
  }
}
