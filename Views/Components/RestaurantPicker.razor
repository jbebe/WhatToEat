@implements IDisposable

<MudContainer>
  <MudText Typo="Typo.h5" Class="ml-2 mt-4 mb-2">Restaurants</MudText>
  <MudTable @ref="Table" Items="Restaurants" Dense="true" MultiSelection="true"
            Hover="true" SelectedItemsChanged="@((HashSet<RestaurantData> changed) => OnSelectedItemChangedAsync(changed))">
    <HeaderContent>
      <MudTh><MudTableSortLabel SortBy="new Func<RestaurantData, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
      <MudTh><MudTableSortLabel SortBy="new Func<RestaurantData, object>(x=>x.PaymentMethod)">Payment method</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd DataLabel="Name">@context.Name</MudTd>
      <MudTd DataLabel="Payment method">@GetPaymentMethodString(context.PaymentMethod, " ")</MudTd>
    </RowTemplate>
  </MudTable>
</MudContainer>

@code {

  public MudTable<RestaurantData> Table { get; set; }

  private List<RestaurantData> Restaurants { get; set; } = new();

  [Inject]
  public StorageService StorageService { get; set; }

  [Inject]
  protected UserService UserService { get; set; }

  [Inject]
  protected VoteService VoteService { get; set; }

  [Inject]
  protected RestaurantService RestaurantService { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await UpdateTableAsync();

    RestaurantService.OnBroadcastRestaurantChanged -= UpdateTableAsync;
    RestaurantService.OnBroadcastRestaurantChanged += UpdateTableAsync;
  }

  private Task UpdateTableAsync()
  {
    InvokeAsync(async () =>
    {
      Restaurants = (await RestaurantService.GetRestaurantsAsync(forceReload: true)).OrderBy(x => x.Name).ToList();
      var voteEntity = await StorageService.GetVoteAsync(UserService.UserData.GetUserId());
      if (voteEntity != null)
      {
        var votes = voteEntity.GetVotesTyped();
        // Warning BL0005: As long as Table doesn't have a SetSelectedItems method, we don't have a choice
#pragma warning disable BL0005
        Table.SelectedItems = new HashSet<RestaurantData>(Restaurants.Where(x => votes.Contains(x.RowKey)));
#pragma warning restore BL0005
      }
#pragma warning disable BL0005
      Table.Items = Restaurants;
#pragma warning restore BL0005

      StateHasChanged();
    });

    return Task.CompletedTask;
  }

  private async Task OnSelectedItemChangedAsync(IEnumerable<RestaurantData> changed)
  {
    await VoteService.SetVoteAsync(changed.Select(x => x.RowKey).ToList());
  }

  private static MarkupString GetPaymentMethodString(PaymentMethod method, string separator)
  {
    string MapToEmoji(PaymentMethod m) =>
      m switch
      {
        PaymentMethod.Cash => "ðŸ’µ",
        PaymentMethod.BankCard => "ðŸ’³",
        PaymentMethod.SzepCard => "<span class=\"szep-icon\">SZÃ‰P</span>",
        _ => throw new ArgumentOutOfRangeException()
      };

    return (MarkupString)string.Join(separator, method.ToValues().Select((Func<PaymentMethod, string>)MapToEmoji));
  }

  public void Dispose()
  {
    RestaurantService.OnBroadcastRestaurantChanged -= UpdateTableAsync;
  }
}
