@using WhatToEat.App.Common;
@using WhatToEat.App.Razor.Internal;
@using WhatToEat.App.Services;
@using WhatToEat.App.Storage.Dtos;
@using WhatToEat.App.Storage.Model;
@using WhatToEat.App.Storage.Repositories;
@inherits BaseComponent;

<MudText Typo="Typo.h5" Class="mb-4">Restaurants</MudText>

<MudTable Items="@RestaurantService.Restaurants.Values" Dense Hover Breakpoint="Breakpoint.Sm" Loading="@Loading" LoadingProgressColor="Color.Info"
		  @ref="TableRef" T="Restaurant" MultiSelection SelectOnRowClick="false"
		  SelectedItemsChanged="SelectedItemsChanged" SelectedItems="SelectedItems">
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Payment method</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.Name</MudTd>
		<MudTd DataLabel="PaymentMethod">
			<PaymentMethodList Value="@context.PaymentMethods" />
		</MudTd>
	</RowTemplate>
</MudTable>

@code {
	[Inject]
	RestaurantService RestaurantService { get; set; } = default!;

	[Inject]
	VoteService VoteService { get; set; } = default!;

	bool Loading { get; set; } = true;

	MudTable<Restaurant>? TableRef;

	HashSet<Restaurant> SelectedItems => 
		new HashSet<Restaurant>(VoteService.Vote?.Restaurants.ToHashSet() ?? new());

	protected override void OnInitialized()
	{
		RestaurantService.OnChanged -= UpdateRestaurantsAsync;
		RestaurantService.OnChanged += UpdateRestaurantsAsync;
	}

	private Task UpdateRestaurantsAsync()
	{
		InvokeAsync(() =>
		{
//#pragma warning disable BL0005
//			TableRef!.SelectedItems = SelectedItems;
//#pragma warning restore BL0005

			StateHasChanged();
		});

		return Task.CompletedTask;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		Loading = false;
		base.OnAfterRender(firstRender);

		InvokeAsync(StateHasChanged);
	}

	void SelectedItemsChanged(HashSet<Restaurant> selectedItems)
	{
#pragma warning disable CS4014
		VoteService.CastVoteAsync(selectedItems.ToList(), CancellationToken);
#pragma warning restore CS4014
	}
}
