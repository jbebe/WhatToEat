@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using WhatToEat.App.Services
@using WhatToEat.App.Services.Models
@using WhatToEat.App.Storage.Model
@using WhatToEat.App.Storage.Repositories
@inherits BaseComponent

<MudDialog @bind-IsVisible="IsVisible">
	<DialogContent>
		<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<MudGrid>
				<MudItem>
					<MudCard>
						<MudCardContent>
							<MudTextField Label="Email" Class="mt-3"
										  @bind-Value="Model.Email" For="@(() => Model.Email)" />
							<MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
										  @bind-Value="Model.Password" For="@(() => Model.Password)" InputType="InputType.Password" />
						</MudCardContent>
						<MudCardActions>
							<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
									   Color="Color.Primary" Class="ml-auto">Login</MudButton>
						</MudCardActions>
					</MudCard>
				</MudItem>
			</MudGrid>
		</EditForm>
	</DialogContent>
</MudDialog>

@code {
	[Inject]
	SessionService SessionService { get; set; } = default!;

	bool IsVisible { get; set; } = false;

	LoginForm Model = new("", "");

	protected override async Task OnAfterRenderAsync(bool first)
	{
		if (!SessionService.IsLoggedIn && !IsVisible && !await SessionService.TryAutoLoginAsync(CancellationToken))
		{
			IsVisible = true;
			StateHasChanged();
		}
	}


	private void OnValidSubmit(EditContext context)
	{
		async Task OnValidSubmitAsync()
		{
			var success = await SessionService.LoginAsync(Model, CancellationToken);
			if (success)
			{
				IsVisible = false;
				await InvokeAsync(StateHasChanged);
			}
		}

#pragma warning disable CS4014
		OnValidSubmitAsync();
#pragma warning restore CS4014
	}

}
