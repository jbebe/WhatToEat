@using System.Timers
@using WhatToEat.App.Server;
@using WhatToEat.App.Services;
@implements IDisposable

<MudContainer>
    <MudText Typo="Typo.h5" Class="ml-2 mt-4 mb-2">Online users</MudText>
    <MudList Class="pt-0">
        @foreach (var user in PresenceService.OnlineUsers)
        {
            <MudPaper Class="my-2 px-3">
                <MudListItem Class="pa-0" Text="@(user.Name)" />
            </MudPaper>
        }
    </MudList>
</MudContainer>

@code {
    [Inject]
    PresenceService PresenceService { get; set; } = default!;

    [Inject]
    WhatToEatSettings Settings { get; set; } = default!;

    [Inject]
    SessionService SessionService { get; set; } = default!;

    System.Timers.Timer Timer { get; set; } = default!;

    protected override void OnInitialized()
    {
        PresenceService.OnPresenceChanged -= OnPresenceChanged;
        PresenceService.OnPresenceChanged += OnPresenceChanged;

        Timer = new(TimeSpan.FromSeconds(Settings.Configuration.PresencePollSec).TotalMilliseconds);
        Timer.Elapsed -= RemotePresenceUpdater;
        Timer.Elapsed += RemotePresenceUpdater;
        Timer.Start();
    }

    private void RemotePresenceUpdater(object? sender, ElapsedEventArgs e)
    {
        PresenceService.UpdatePresence(SessionService.User!.IdTyped);
    }

    void OnPresenceChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Timer.Stop();
        Timer.Close();
        Timer.Dispose();
        PresenceService.OnPresenceChanged -= OnPresenceChanged;
    }
}
